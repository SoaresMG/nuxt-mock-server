import { relative } from "pathe";
import { useNuxt, createResolver, addTemplate } from "@nuxt/kit";
import type { ModulePackageInfo } from "./runtime/types";

export function extendTypes(packageInfo: ModulePackageInfo, template: (options: { typesPath: string; }) => string | Promise<string>) {
  const nuxt = useNuxt();
  const { resolve } = createResolver(import.meta.url);
  const fileName = `${packageInfo.name.replace("/", "-")}.d.ts`;
  // paths.d.ts
  addTemplate({
    filename: `module/${fileName}`,
    getContents: async () => {
      const typesPath = relative(resolve(nuxt!.options.rootDir, nuxt!.options.buildDir, "module"), resolve("./runtime/types"));
      const s = await template({ typesPath });
      return `// Generated by ${packageInfo.name}@${packageInfo.version}
${s}
export {}
`;
    },
  });

  nuxt.hooks.hook("prepare:types", ({ references }) => {
    references.push({ path: resolve(nuxt.options.buildDir, `module/${fileName}`) });
  });

  nuxt.hooks.hook("nitro:config", (config) => {
    config.typescript = config.typescript || {};
    config.typescript.tsConfig = config.typescript.tsConfig || {};
    config.typescript.tsConfig.include = config.typescript.tsConfig.include || [];
    config.typescript.tsConfig.include.push(`./module/${fileName}`);
  });
}
